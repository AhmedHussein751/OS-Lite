- When the Power Supply Unit (PSU) receives the activate signal, it begins supplying power to the rest of the system. When the correct amount of power is supplied to all devices, the PSU will be able to continue supplying that power without any major problems.

- The PSU then sends a signal, called the "power_good" signal into the motherboard to the Basic Input Output System (BIOS)

- the BIOS begins initializing a process called POST (Power On Self Test). The POST then tests to insure there is good amount of power being supplied, the devices installed (such as keyboard, mouse, USB, serial ports, etc.), and insures the memory is good (By testing for memory curruption).

- The POST then gives control to the BIOS. The POST loads the BIOS at the end of memory (Might be 0xFFFFF0) and puts a jump instruction at the first byte in memory. 

- The processors Instruction Pointer (CS:IP) is set to 0, and the processor takes control. 

-  The processor starts executing instructions at address 0x0. In this case, it is the jump instruction placed by the POST. This jump instruction jumps to 0xFFFFF0 (or wherever the BIOS was loaded), and the processor starts executing the BIOS. 

- The Basic Input Output System (BIOS) creates an Interrupt Vector Table (IVT), and provides some basic interrupt services. The BIOS then does some more tests to insure there is no hardware problems. The BIOS also supplies a Setup utility.

- A common interrupts, for example, is INT 0x21 used for DOS.
Note: There is no DOS! The *Only* interrupts available are the interrupts set up by the BIOS, and no more! The use of other interrupts will cause the system to execute a nonexistant routine, causing your program to crash. 

-  The BIOS then needs to find an OS. Based on the boot order that you set in the BIOS Setup, the BIOS will execute Interrupt (INT) 0x19 to attempt to find a bootable device. If no bootable device is found (INT 0x19 returns), the BIOS goes on to the next device listed in the boot order. If there is no more devices, it will print an error simular to "No Operating System found" and halt the system.

- INT 0x19 - SYSTEM: BOOTSTRAP LOADER
Reboots the system through a Warm Reboot (process of aborting and reloading OS) without clearing memory or restoring the Interrupt Vector Table (IVT).
This interrupt is executed by the BIOS. It reads the first sector (Sector 1, Head 0, Track 0) of the first hard disk (512 bytes).If the disk is bootable, Then the bootsector will be loaded at 0x7C00, and INT 0x19 will jump to it, therby giving control to the bootloader. 

- If the processor finds a problem during execution (Such as an invalid instruction, division by 0, etc.) It executes a Second Fault Exception Handler (Double Fault), Which is Interrupt 0x8.

- Triple Fault: A CPU that "Triple Faults" simply means the system hard reboots.
 
- The bootloader is loaded by the BIOS at absolute address 0x7c00:0. After loading, CS:IP is set to your bootloader, and the bootloader takes full control.

- Real Mode: Uses the native segment:offset memory model, limited to 64k of memory and no virtual memory or memory protection. CPU Registers are accessible in this mode. "Absolute Memory Address = (Segment Address * 16(decimal)) + Offset" and Memory Segmentation Registers:
    CS (Code Segment) - Stores base segment address for code
    DS (Data Segment) - Stores base segment address for data
    ES (Extra Segment) - Stores base segment address for anything
    SS (Stack Segment) - Stores base segment address for the stack

- Protected Mode: 32 bit processor mode, allows memory protection through the use of descriptor tables.

- Unreal Mode: Real Mode with address space of Protected Mode (The whole 4 GB).

- Virtual Mode: Protected mode with 16 bit real mode to allow for BIOS interrupts that are only avaliable in real mode.

-  INT 0x10 - VIDEO TELETYPE OUTPUT
AH = 0x0E
AL = Character to write
BH - Page Number (Should be 0)
BL = Foreground color (Graphics Modes Only)


- Rings Theory: A "Ring" in assembly represents the level of protection and control the program has over the system. There are four rings: Ring 0, Ring 1, Ring 2 and Ring 3 where Ring 0 has the absolute control and Ring 3 has the least control.

- BIOS INT 0x13, Function 0 to reset the floppy drive. What this means is, wherever the Floppy Controller is reading from, it will immediately go to the first Sector on disk.
   INT 0x13/AH=0x0 - DISK : RESET DISK SYSTEM
   AH = 0x0
   DL = Drive to Reset

- BIOS Interrupt (INT) 0x13 Function 0x02 - Reading Sectors
   INT 0x13/AH=0x02 - DISK : READ SECTOR(S) INTO MEMORY
   AH = 0x02
   AL = Number of sectors to read
   CH = Low eight bits of cylinder number (track)
   CL = Sector Number (Bits 0-5). Bits 6-7 are for hard disks only
   DH = Head Number
   DL = Drive Number (Bit 7 set for hard disks)
   ES:BX = Buffer to read sectors to

- floppy -> 80 tracks per side -> 18 sectors/tracks -> each sector 512 byte -> two heads

- OEM Parameter Block

bpbBytesPerSector:  	DW 512               ; Bytes Per Sector
bpbSectorsPerCluster: 	DB 1                 ; Sectors Per Cluster
bpbReservedSectors: 	DW 1                 ; Number of sectors outside of FAT
bpbNumberOfFATs: 	DB 2                 ; FAT12 has two 2 FATS
bpbRootEntries: 	DW 224               ; Max 224 directories within root directory
bpbTotalSectors: 	DW 2880              ; Total Number Of Sectors
bpbMedia: 	        DB 0xF0              ; 
                                             ; Bits 0: Sides/Heads = 0 if it is single sided, 1 if its double sided
                                             ; Bits 1: Size = 0 if it has 9 sectors per FAT, 1 if it has 8.
                                             ; Bits 2: Density = 0 if it has 80 tracks, 1 if it is 40 tracks.
                                             ; Bits 3: Type = 0 if its a fixed disk (Such as hard drive), 1 if removable (Such as floppy drive)
                                             ; Bits 4 to 7 are unused, and always 1. 
bpbSectorsPerFAT: 	DW 9                 ; Sectors Per FAT
bpbSectorsPerTrack: 	DW 18                ; Sectors Per Track
bpbHeadsPerCylinder: 	DW 2                 ; 2 HEADs Per Cylinder
bpbHiddenSectors: 	DD 0                 ; Number of sectors from start of physical disk till start of the volume
bpbTotalSectorsBig:     DD 0                 ; 
bsDriveNumber: 	        DB 0                 ; Drive 0 
bsUnused: 	        DB 0
bsExtBootSignature: 	DB 0x29              ; Type and version of BIOS Parameter Block ( MS/PC-DOS version 4.0)
bsSerialNumber:	        DD 0xa0a1a2a3
bsVolumeLabel: 	        DB "MOS FLOPPY "     ; 11 Bytes Max
bsFileSystem: 	        DB "FAT12   "        ; 8 Bytes Max

- hlt without cli can cause triple fault as the interrupt can still occur while the cpu is haulted.

- Filesystem -> helps create the concept of file in a disk.

- Cluster -> span of sectors.

- FAT12:
1) No hierarchial directories -> only Root Directory.
2) Cluster addresses limited to 12 bits.
3) Filenames is 12 bits identifier 
4) Disk size is 16 bit count of sectors.
5) Uses the value "0x01" to identify partitions.
6) Disk Storage: Boot Sector - Extra Reserved Sectors - File Allocation Table 1 - File Allocation Table 2 - Root Directory (FAT12/FAT16 Only) - Data Region containing files and directories.
7) FAT is an array of 12 bits entries: 
    Value marks free cluster : 0x000
    Value marks Reserved cluster : 0x001
    This cluster is in use--the value represents next cluster : 0x002 through 0xFEF
    Reserved values : 0xFF0 through 0xFF6
    Value marks bad clusters : 0xFF7
    Value marks this cluster as the last in the file : 0xFF8 through 0xFFF
8) Root Directory is an array of 32 bytes values:
    Bytes 0-7 : DOS File name (Padded with spaces)
    Bytes 8-10 : DOS File extension (Padded with spaces)
    Bytes 11 : File attributes. This is a bit pattern:
        Bit 0 : Read Only
        Bit 1 : Hidden
        Bit 2 : System
        Bit 3 : Volume Label
        Bit 4 : This is a subdirectory
        Bit 5 : Archive
        Bit 6 : Device (Internal use)
        Bit 6 : Unused
    Bytes 12 : Unused
    Bytes 13 : Create time in ms
    Bytes 14-15 : Created time, using the following format:
        Bit 0-4 : Seconds (0-29)
        Bit 5-10 : Minutes (0-59)
        Bit 11-15 : Hours (0-23)
    Bytes 16-17 : Created year in the following format:
        Bit 0-4 : Year (0=1980; 127=2107
        Bit 5-8 : Month (1=January; 12=December)
        Bit 9-15 : Hours (0-23)
    Bytes 18-19 : Last access date (Uses same format as above)
    Bytes 20-21 : EA Index (Used in OS/2 and NT, dont worry about it)
    Bytes 22-23 : Last Modified time (See byte 14-15 for format)
    Bytes 24-25 : Last modified date (See bytes 16-17 for format)
    Bytes 26-27 : First Cluster
    Bytes 28-32 : File Size

- The system bus is also known as the Front Side Bus that communicates with the north bridge in the motherboard. The System Bus is a combination of the Data Bus, Address Bus, and Control Bus.

- The Memory Controller is the primary interface between the System Bus (ak, Front Side Bus(FSB) ) on the motherboard to the physical RAM chips. 

- A DDR Controller is used to refresh DDR SDRAM, which uses the System Clock pulse to allow reading and writing memory. 

- A Dual Channel Controller are used where DRAM devices are seperated into two small busses, allowing reading and writing two memory locations at once. This helps increasing speed when accessing RAM. 

- A Port simply provides an interface between two devices. There are two types of ports: Hardware Ports and Software Ports:
1) A Hardware Port provides the interface between two physical devices. This port is usually a connection device of sorts. This includes, but is not limited to: Serial Ports, Parallel ports, PS/2 Ports, 1394, FireWire, USB Ports, etc.
2) A Software Port is a number representing hardware. The basic idea is that we communicate to hardware by specifying certain memory addresses. The port number represents this address

- x86 Real Mode Memory Map: 
    0x00000000 - 0x000003FF - Real Mode Interrupt Vector Table
    0x00000400 - 0x000004FF - BIOS Data Area
    0x00000500 - 0x00007BFF - Unused
    0x00007C00 - 0x00007DFF - Our Bootloader
    0x00007E00 - 0x0009FFFF - Unused
    0x000A0000 - 0x000BFFFF - Video RAM (VRAM) Memory
    0x000B0000 - 0x000B7777 - Monochrome Video Memory
    0x000B8000 - 0x000BFFFF - Color Video Memory
    0x000C0000 - 0x000C7FFF - Video ROM BIOS
    0x000C8000 - 0x000EFFFF - BIOS Shadow Area
    0x000F0000 - 0x000FFFFF - System BIOS

- How does the processor differenate between writing memory and accessing a controller?
	The processor sets another line on the control bus--An I/O ACCESS line. If this line is set, The I/O Controllers from within the I/O SubSystem watches the Address Bus. If the Address Bus currosponds to a number that is assigned to the device, that device takes the value from the data bus and acts upon it. The Memory Controller ignores any request if this line is set. So, if the port number has not been assigned, absolutely nothing happens. No controller acts on it, and the Memory Controller ignores it. 

- IN and OUT Instructions: The x86 processor has two instructions used for port I/O. They are IN and OUT. These instructions tell the processor that we want to communicate to a device. This insures the processor sets the I/O DEVICE line on the control bus. 

- Port mapping and Port I/O are very important. It is our only way of cummunicating with hardware in protected mode. The other way is interrupts and is available only in Real Mode.

- General Purpose Registers:
These are 32 bit registers that can be used for almost any purpose. They can be used within any program, from Ring 0 to Ring 4 Each of these registers have a special purpose as well:
    EAX - Accumlator Register. Primary purpose: Math calculations
    EBX - Base Address Register. Primary purpose: Indirectly access memory through a base address.
    ECX - Counter Register. Primary purpose: Use in counting and looping.
    EDX - Data Register. Primary purpose: um... store data. Yep, thats about it 

- Segment Registers
The segment registers modify the current segment addresses in real mode. They are all 16 bit.
    CS - Segment address of code segment
    DS - Segment address of data segment
    ES - Segment address of extra segment
    SS - Segment address of stack segment
    FS - Far Segment address
    GS - General Purpose Register

- Index Registers
The x86 uses several registers that help when access memory.
    SI - Source Index
    DI - Destination Index
    BP - Base Pointer
    SP - Stack Pointer
Each of these registers store a 16 bit base address (that may be used as an offset address as well.) 

- Instruction Pointer / Program Counter
The Instruction Pointer (IP) register stores the current offset address of the currently exectuting instruction

-Instruction Register
This is an internal processor register that cannot be accessed through normal means. It is stored within the Control Unit (CU) of the processor inside the Instruction Cache. It stores the current instruction that is being translated to Microinstructions for use internally by the processor.

- Control Registers
The control registers allow us to change the behavior of the processor. They are: CR0, CR1, CR2, CR3, CR4. 
1) CR0 Control Register:
    Bit 0 (PE) : Puts the system into protected mode
    Bit 1 (MP) : Monitor Coprocessor Flag This controls the operation of the WAIT instruction.
    Bit 2 (EM) : Emulate Flag. When set, coprocessor instructions will generate an exception
    Bit 3 (TS) : Task Switched Flag This will be set when the processor switches to another task.
    Bit 4 (ET) : ExtensionType Flag. This tells us what type of coprocesor is installed.
        0 - 80287 is installed
        1 - 80387 is installed.
    Bit 5 (NE): Numeric Error
        0 - Enable standard error reporting
        1 - Enable internal x87 FPU error reporting
    Bits 6-15 : Unused
    Bit 16 (WP): Write Protect
    Bit 17: Unused
    Bit 18 (AM): Alignment Mask
        0 - Alignment Check Disable
        1 - Alignment Check Enabled (Also requires AC flag set in EFLAGS and ring 3)
    Bits 19-28: Unused
    Bit 29 (NW): Not Write-Through
    Bit 30 (CD): Cache Disable
    Bit 31 (PG) : Enables Memory Paging.
        0 - Disable
        1 - Enabled and use CR3 register

2) CR1 Control Register
Reserved by Intel, do not use. 
3) CR2 Control Register
Page Fault Linear Address. If a Page Fault Exception accures, CR2 contains the address that was attempted accessed 
4) CR3 Control Register
Used when the PG bit in CR0 is set. Last 20 bits Contains the Page Directory Base Register (PDBR) 
5) Used in protected mode to control operations, such as v8086 mode, enabling I/O breakpoints, Page size extension and machine check exceptions
    Bit 0 (VME) : Enables Virtual 8086 Mode Extensions
    Bit 1 (PVI) : Enables Protected Mode Virtual Interrupts
    Bit 2 (TSD) : Time Stamp Enable
        0 - RDTSC instruction can be used in any privilege level
        1 - RDTSC instruction can only be used in ring 0
    Bit 3 (DE) : Enable Debugging Extensions
    Bit 4 (PSE) : Page Size Extension
        0 - Page size is 4KB
        1 - Page size is 4MB. With PAE, it is 2MB.
    Bit 5 (PAE) : Physical Address Extension
    Bits 6 (MCE) : Machine Check Exception
    Bits 7 (PGE) : Page Global Enable
    Bits 8 (PCE) : Performance Monitoring Counter Enable
        0 - RDPMC instruction can be used in any privilege level
        1 - RDPMC instruction can only be used in ring 0
    Bits 9 (OSFXSR) : OS Support for FXSAVE and FXSTOR instructions (SSE)
    Bits 10 (OSXMMEXCPT) : OS Support for unmasked SIMD FPU exceptions
    Bits 11-12 : Unused
    Bits 13 (VMXE) : VMX Enable
6) CR8 Control Register
Provides Read and Write access to the Task Prority Register (TPR)

- PMode Segmentation Registers
The x86 family uses several registers to store the current linear address of each Segment Descriptor.
These registers are:
    GDTR - Global Descriptor Table Register
    IDTR - Interrupt Descriptor Table Register
    GDTR - Local Descriptor Table Register
    TR - Task Register


- Descriptor Tables: Defines how the memory is used
1) Global Descriptor Table: defines the global memory map. It defines what memory can be executed (The Code Descriptor), and what area contains data (Data Descriptor) using three descriptors: Null Descriptor, data descriptor and code descriptor.  For the GDT, a "Descriptor" is an 8 byte QWORD value that describes properties for the descriptor. They are of the format: 

    Bits 56-63: Bits 24-32 of the base address
    Bit 55: Granularity
        0: None
        1: Limit gets multiplied by 4K
    Bit 54: Segment type
        0: 16 bit
        1: 32 bit
    Bit 53: Reserved-Should be zero
    Bits 52: Reserved for OS use
    Bits 48-51: Bits 16-19 of the segment limit
    Bit 47 Segment is in memory (Used with Virtual Memory)
    Bits 45-46: Descriptor Privilege Level
        0: (Ring 0) Highest
        3: (Ring 3) Lowest
    Bit 44: Descriptor Bit
        0: System Descriptor
        1: Code or Data Descriptor
    Bits 41-43: Descriptor Type
        Bit 43: Executable segment
            0: Data Segment
            1: Code Segment
        Bit 42: Expansion direction (Data segments), conforming (Code Segments)
        Bit 41: Readable and Writable
            0: Read only (Data Segments); Execute only (Code Segments)
            1: Read and write (Data Segments); Read and Execute (Code Segments)
    Bit 40: Access bit (Used with Virtual Memory)
    Bits 16-39: Bits 0-23 of the Base Address -> starting base adress
    Bits 0-15: Bits 0-15 of the Segment Limit 
The processor uses a special register--GDTR, that stores the data within the base GDT pointer. To load the GDT into the GDTR register, we will need a special instruction...LGDT (Load GDT).
toc: 
	dw end_of_gdt - gdt_data - 1 	; limit (Size of GDT)
	dd gdt_data 	
lgdt	[toc]		; load GDT into GDTR

2) Local Descriptor Table
The Local Descriptor Table (LDT) is a smaller form of the GDT defined for specialized uses. It does not define the entire memory map of the system, but instead, only up to 8,191 memory segments

3) Interrupt Descriptor Table: The Interrupt Descriptor Table (IDT) defines the Interrupt Vector Table (IVT). It always resides from address 0x0 to 0x3ff. The first 32 vectors are reserved for hardware exceptions generated by the processor. For example, a General Protection Fault, or a Double Fault Exception. This allows us to trap processor errors without triple faulting. More on this later, though.



- Entering Protected Mode:
1) Load a new GDT which describes permission levels when accessing memory.
2) Switch the processor into protected mode.
3) Jump into the 32 bit world.


 

